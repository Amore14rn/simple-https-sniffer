package main

import (
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/stretchr/testify/assert"
	"net"
	"testing"
)

func TestNewDevice(t *testing.T) {
	dev := NewDevice("eth0")
	assert.Equal(t, dev.Name, "eth0")
}

func TestNewTransfer(t *testing.T) {
	transfer := NewTransfer()

	assert.IsType(t, transfer.SrcIP, *new(net.IP))
	assert.IsType(t, transfer.DstIP, *new(net.IP))
	assert.IsType(t, transfer.SrcPort, *new(layers.TCPPort))
	assert.IsType(t, transfer.DstPort, *new(layers.TCPPort))
	assert.IsType(t, transfer.OptCount, *new(int))
}

func TestNewLayersData(t *testing.T) {
	ld := NewLayersData()

	assert.IsType(t, ld.eth, *new(layers.Ethernet))
	assert.IsType(t, ld.ip4, *new(layers.IPv4))
	assert.IsType(t, ld.ip6, *new(layers.IPv6))
	assert.IsType(t, ld.tcp, *new(layers.TCP))
	assert.IsType(t, ld.tls, *new(layers.TLS))
	assert.IsType(t, ld.payload, *new(gopacket.Payload))
	assert.IsType(t, ld.parser, new(gopacket.DecodingLayerParser))
	assert.IsType(t, ld.decodedLayers, *new([]gopacket.LayerType))
}

func TestGetDevices(t *testing.T) {
	_, err := getDevices()

	if err != nil {
		t.Error(err)
	}
}

func TestTransfer_DecodeFromPacket(t *testing.T) {
	data := []byte{212, 37, 139, 254, 194, 252, 216, 80, 230, 169, 219, 112, 8, 0, 69, 48, 5, 120, 182, 83, 64, 0, 47, 6, 141, 161, 93, 186, 225, 208, 192, 168, 2, 40, 1, 187, 139, 4, 68, 151, 121, 83, 48, 125, 250, 115, 80, 16, 0, 83, 36, 107, 0, 0, 22, 186, 236, 214, 111, 255, 223, 117, 252, 150, 134, 156, 163, 245, 31, 152, 92, 155, 3, 158, 218, 253, 170, 167, 0, 222, 191, 202, 122, 52, 198, 92, 225, 77, 189, 20, 250, 106, 126, 154, 85, 1, 247, 213, 172, 82, 51, 239, 77, 103, 201, 175, 32, 28, 135, 37, 203, 59, 146, 171, 190, 82, 2, 98, 169, 117, 4, 101, 3, 99, 63, 82, 96, 219, 255, 117, 242, 135, 102, 100, 227, 225, 213, 107, 223, 167, 197, 224, 167, 165, 15, 96, 82, 167, 20, 91, 64, 50, 247, 49, 120, 111, 208, 86, 64, 235, 229, 141, 84, 137, 26, 185, 29, 41, 70, 71, 225, 157, 60, 216, 129, 234, 159, 3, 109, 221, 113, 71, 129, 44, 230, 249, 67, 73, 101, 160, 65, 226, 46, 9, 108, 45, 151, 255, 214, 63, 124, 98, 236, 215, 52, 55, 225, 67, 201, 213, 31, 0, 167, 7, 245, 54, 56, 58, 157, 105, 52, 7, 204, 131, 48, 201, 106, 229, 164, 131, 54, 55, 132, 47, 68, 28, 179, 252, 115, 229, 195, 230, 24, 168, 161, 153, 250, 20, 170, 237, 249, 184, 165, 8, 85, 203, 190, 124, 11, 140, 16, 130, 108, 110, 235, 74, 159, 20, 190, 101, 106, 231, 169, 90, 187, 174, 21, 176, 191, 48, 65, 48, 83, 64, 4, 56, 205, 185, 153, 135, 103, 11, 176, 180, 90, 251, 22, 61, 189, 2, 101, 251, 138, 214, 56, 28, 88, 4, 22, 42, 141, 81, 96, 173, 34, 174, 86, 97, 180, 155, 219, 150, 62, 220, 20, 119, 161, 111, 217, 38, 204, 19, 136, 226, 24, 112, 155, 236, 3, 169, 252, 33, 188, 78, 190, 82, 88, 155, 242, 200, 105, 75, 2, 19, 179, 186, 24, 171, 138, 111, 92, 63, 193, 4, 194, 121, 123, 64, 230, 100, 124, 147, 194, 172, 61, 15, 173, 236, 146, 217, 248, 53, 159, 91, 146, 217, 109, 148, 82, 164, 17, 228, 167, 189, 77, 25, 244, 24, 66, 216, 32, 226, 4, 136, 160, 55, 116, 173, 161, 178, 103, 153, 112, 164, 166, 59, 251, 5, 106, 49, 17, 38, 5, 12, 203, 188, 107, 228, 187, 61, 52, 22, 111, 181, 161, 165, 28, 219, 64, 80, 57, 161, 104, 228, 54, 118, 139, 66, 158, 182, 177, 82, 106, 147, 132, 68, 45, 204, 23, 195, 79, 58, 157, 126, 188, 168, 110, 247, 41, 123, 199, 207, 117, 242, 199, 24, 163, 96, 235, 70, 76, 148, 111, 68, 186, 51, 118, 1, 139, 14, 156, 91, 175, 148, 27, 253, 29, 210, 227, 207, 181, 23, 94, 182, 32, 193, 225, 173, 137, 186, 79, 105, 182, 54, 214, 227, 176, 180, 6, 109, 175, 189, 233, 188, 220, 195, 165, 152, 145, 234, 5, 82, 127, 97, 182, 225, 157, 131, 183, 63, 190, 245, 123, 10, 238, 122, 250, 60, 118, 121, 251, 181, 165, 57, 63, 54, 4, 249, 62, 200, 153, 251, 124, 189, 131, 108, 38, 126, 163, 36, 119, 161, 78, 105, 44, 9, 80, 140, 204, 183, 34, 142, 149, 45, 240, 57, 158, 235, 134, 253, 29, 242, 46, 252, 77, 211, 56, 39, 215, 90, 252, 116, 222, 8, 103, 112, 202, 46, 3, 91, 110, 127, 213, 110, 250, 24, 203, 253, 172, 122, 211, 85, 169, 141, 252, 75, 20, 166, 109, 122, 171, 116, 26, 46, 85, 252, 86, 49, 14, 225, 60, 53, 15, 56, 68, 164, 38, 126, 11, 121, 35, 179, 157, 77, 134, 253, 204, 18, 30, 221, 248, 41, 96, 99, 87, 71, 218, 115, 138, 109, 123, 121, 95, 16, 6, 226, 16, 207, 133, 200, 115, 137, 145, 11, 237, 225, 75, 134, 190, 162, 118, 67, 152, 149, 174, 145, 9, 153, 156, 146, 39, 165, 71, 40, 44, 114, 159, 127, 170, 27, 63, 209, 69, 72, 9, 179, 192, 115, 61, 186, 110, 10, 26, 157, 0, 20, 69, 35, 242, 145, 228, 62, 52, 173, 147, 192, 43, 143, 215, 82, 235, 199, 189, 69, 69, 155, 7, 121, 252, 229, 155, 216, 114, 176, 131, 7, 54, 159, 238, 159, 74, 19, 146, 134, 12, 91, 187, 84, 192, 64, 111, 156, 147, 68, 244, 37, 103, 132, 88, 54, 150, 51, 125, 219, 235, 211, 53, 141, 123, 158, 55, 123, 86, 146, 201, 85, 136, 69, 170, 95, 250, 144, 195, 136, 233, 193, 225, 33, 19, 150, 211, 9, 188, 115, 186, 209, 105, 71, 135, 78, 229, 27, 195, 172, 32, 34, 190, 141, 234, 88, 78, 150, 130, 227, 151, 87, 196, 173, 116, 236, 242, 246, 56, 14, 119, 221, 201, 143, 62, 71, 100, 92, 158, 7, 5, 191, 147, 162, 202, 32, 194, 96, 145, 109, 38, 11, 210, 108, 111, 121, 103, 178, 94, 213, 112, 26, 14, 41, 30, 14, 136, 83, 15, 55, 192, 75, 55, 211, 199, 45, 91, 241, 141, 34, 227, 114, 140, 59, 134, 50, 44, 50, 90, 217, 19, 221, 171, 46, 231, 2, 203, 234, 120, 6, 151, 2, 29, 33, 35, 241, 74, 106, 33, 118, 64, 111, 34, 28, 198, 15, 218, 113, 157, 110, 28, 49, 199, 26, 225, 122, 166, 130, 193, 169, 147, 200, 190, 38, 102, 181, 23, 154, 33, 239, 214, 79, 174, 104, 93, 206, 218, 7, 65, 78, 223, 108, 67, 66, 159, 136, 130, 55, 254, 237, 39, 166, 197, 128, 21, 110, 142, 128, 41, 84, 21, 79, 27, 83, 248, 95, 253, 253, 182, 87, 109, 98, 177, 246, 12, 240, 212, 36, 230, 12, 26, 240, 131, 66, 87, 172, 228, 108, 92, 18, 155, 10, 147, 172, 80, 152, 158, 206, 46, 10, 117, 41, 65, 146, 200, 187, 17, 198, 21, 93, 34, 34, 87, 160, 120, 158, 117, 253, 105, 119, 185, 144, 207, 68, 69, 189, 229, 150, 244, 129, 21, 78, 72, 27, 17, 102, 98, 238, 111, 200, 78, 175, 188, 101, 115, 85, 81, 7, 70, 245, 106, 199, 179, 154, 143, 241, 239, 223, 124, 37, 56, 195, 212, 54, 62, 58, 5, 206, 71, 112, 209, 2, 164, 176, 231, 151, 155, 217, 153, 236, 33, 90, 99, 236, 104, 14, 223, 192, 202, 223, 95, 129, 116, 14, 164, 255, 141, 32, 75, 60, 67, 78, 53, 84, 78, 88, 228, 159, 253, 89, 199, 160, 66, 21, 173, 91, 41, 66, 155, 18, 36, 122, 75, 47, 140, 221, 23, 109, 92, 25, 120, 110, 67, 244, 139, 208, 73, 126, 4, 43, 111, 52, 137, 227, 115, 90, 42, 36, 208, 88, 127, 182, 41, 123, 32, 131, 100, 189, 189, 85, 146, 18, 129, 51, 20, 227, 192, 7, 167, 107, 98, 222, 183, 53, 127, 43, 168, 146, 53, 233, 221, 111, 55, 181, 15, 70, 245, 125, 139, 153, 41, 226, 110, 41, 6, 124, 35, 159, 47, 96, 237, 132, 67, 148, 35, 5, 140, 126, 166, 146, 143, 130, 214, 0, 211, 62, 163, 213, 226, 180, 149, 83, 64, 49, 78, 42, 174, 217, 34, 49, 188, 138, 130, 60, 117, 191, 233, 161, 187, 64, 153, 18, 28, 30, 66, 52, 7, 171, 49, 167, 42, 31, 228, 206, 253, 193, 40, 203, 213, 80, 106, 128, 0, 21, 143, 146, 147, 211, 182, 203, 115, 201, 122, 121, 31, 180, 162, 50, 166, 166, 226, 152, 0, 186, 86, 14, 89, 48, 214, 194, 15, 100, 132, 34, 113, 156, 139, 19, 14, 91, 79, 46, 17, 118, 16, 127, 72, 235, 133, 21, 66, 152, 229, 163, 117, 252, 34, 231, 62, 26, 201, 63, 85, 87, 62, 168, 148, 250, 89, 66, 15, 47, 181, 55, 13, 135, 34, 59, 46, 227, 90, 200, 192, 183, 163, 117, 150, 227, 100, 17, 38, 160, 211, 181, 70, 63, 87, 99, 4, 151, 81, 19, 75, 37, 74, 214, 119, 7, 58, 59, 211, 6, 180, 94, 145, 69, 188, 145, 213, 67, 237, 7, 75, 248, 107, 138, 231, 69, 48, 41}
	ld := NewLayersData()
	transfer := NewTransfer()

	transfer.DecodeFromPacket(data, ld)
	assert.Equal(t, "93.186.225.208", transfer.SrcIP.String())
	assert.Equal(t, "192.168.2.40", transfer.DstIP.String())
	assert.Equal(t, layers.TCPPort(443), transfer.SrcPort)
	assert.Equal(t, layers.TCPPort(35588), transfer.DstPort)
}
